; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = hw11_bootloader

[env]
platform = ststm32@~7.0.0
board = genericSTM32F103VC
framework = stm32cube
lib_deps =
    https://github.com/RoboticsBrno/RB3204-RBCX-coproc-comm/archive/91a9a07f3569ce7d20d3c3d4ebc44e29bea976a8.zip

build_flags =
    -Iinclude
    -std=c++17
    -DUSE_FULL_LL_DRIVER
    -DUSB_PMASIZE=512
    -DRBCX_VER_REVISION='"ffffffff"'
    -DRBCX_VER_DIRTY=1
    -DRBCX_VER_DIRTY_STR='"-dirty"'
    -DRBCX_VER_NUMBER=0x000000
    -Wl,-u,_printf_float

extra_scripts =
  pre:pre_wno_register.py
  pre:pre_generate_version_defines.py

debug_tool = stlink
upload_protocol = stlink

# This env flashes over STLink, and overwrites bootloader if it is present.
[env:hw10_stlink]
build_type = debug
build_flags =
    ${env.build_flags}
    -DRBCX_HW_VER=0x0100
    -DUSBD_DP_PORT=GPIOA
    -DUSBD_DP_PIN=8

# This env flashes over STLink, and overwrites bootloader if it is present.
[env:hw11_stlink]
build_type = debug
build_flags =
    ${env.build_flags}
    -DRBCX_HW_VER=0x0101
    -DUSBD_DP_PORT=GPIOD
    -DUSBD_DP_PIN=2



# This env flashes over USB UDF protocol and requires sboot bootloader to be flashed.
#     Flash with hw11_stlink_bootloader env first or use sboot from https://github.com/RoboticsBrno/sboot_stm32
#     Default Win10 driver does not work, use generic libusb from https://zadig.akeo.ie/
#     Usage explained at https://www.hanselman.com/blog/HowToFixDfuutilSTMWinUSBZadigBootloadersAndOtherFirmwareFlashingIssuesOnWindows.aspx
[env:hw11_bootloader]
build_type = debug
build_flags =
    ${env.build_flags}
    -DRBCX_HW_VER=0x0101
    -DUSBD_DP_PORT=GPIOD
    -DUSBD_DP_PIN=2
    -DRBCX_SBOOT=1
    -DRBCX_VECT_TAB_OFFSET=0x1000

extra_scripts =
    ${env.extra_scripts}
    post:post_dfu.py

board_build.ldscript = linker_bootloader.ld
upload_protocol = dfu

# This env flashes over STLink, and overwrites any present bootloader,
# but has its own, prebuilt, sboot bootloader baked in.
[env:hw11_stlink_bootloader]
build_type = debug

build_flags =
    ${env.build_flags}
    -DRBCX_HW_VER=0x0101
    -DUSBD_DP_PORT=GPIOD
    -DUSBD_DP_PIN=2
    -DRBCX_SBOOT=1
    -DRBCX_SBOOT_BUILTIN=1
    -DRBCX_VECT_TAB_OFFSET=0x1000

board_build.ldscript = linker_stlink_bootloader.ld
